---
'$schema': https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: ecmarkdown
scopeName: text.html.markdown.ecmarkdown

# Run node ../scripts/generate-tmLanguage.ts to update it from @tc39/ecma262-biblio
variables:
  aoid: generated
  term: generated

patterns:
- include: '#OrderedListItem'
- include: '#UnorderedListItem'

repository:
  OrderedListItem:
    name: markup.list.numbered.markdown.ecmarkdown
    begin: (\d+\.)
    beginCaptures:
      1: { name: punctuation.definition.list.begin.markdown.ecmarkdown }
    end: '$'
    patterns:
    - include: '#AttributeList'
    - include: '#Pattern'
    - include: 'text.html.derivative'
  UnorderedListItem:
    name: markup.list.unnumbered.markdown.ecmarkdown
    begin: (\*)
    beginCaptures:
      1: { name: punctuation.definition.list.begin.markdown.ecmarkdown }
    end: '$'
    patterns:
    - include: '#AttributeList'
    - include: '#Pattern'
    - include: 'text.html.derivative'
  AttributeList:
    begin: '(\[)(?!\[)'
    beginCaptures:
      1: { name: punctuation.brackets.attribute }
    end: '(\])(?!\])'
    endCaptures:
      1: { name: punctuation.brackets.attribute }
    patterns:
    - begin: '"'
      end: '"'
      name: string.quoted
    - match: '='
      name: punctuation.separator.key-value
    - match: ','
      name: punctuation.separator.list.pair
    - match: '\w+'
      name: entity.other.attribute-name
  Pattern:
    patterns:
    - include: '#Variable'
    - include: '#Intrinsic'
    # - include: '#Code'
    - include: '#SpecValue'
    - include: '#Value'
    - include: '#NonTerminal'
    - match: '(?i)\bLet\b'
      name: storage.type.tsx
    - match: '(?i)\bFor each\b'
      name: keyword.control
    - begin: '(\[\[)'
      beginCaptures:
        1: { name: meta.bracket.square.access }
      end: '(\]\])'
      endCaptures:
        1: { name: meta.bracket.square.access }
      patterns:
      - match: '\w+'
        name: variable.object
    - match: '(?i)Assert:|!'
      name: keyword.control.assert
    - match: '(?i)\b(Throw|\?)\b'
      name: keyword.control.trycatch
    - match: '(?i)\b(If|Else if|Else|then|is not present|return|repeat|while)\b'
      name: keyword.control.flow
    - match: '\*(true|false|null|TypeError|RangeError)\*'
      name: constant.language
    - match: '{{aoid}}'
      name: entity.name.function
    - match: '{{term}}'
      name: markup.italic
    - match: '(?i)\b(set|append|remove)\b'
      name: storage.type.tsx
  NonTerminal:
    match: '\|\w+\|'
    name: entity.name.type.class.syntax
  Variable:
    match: '_\w+_'
    name: variable
  Intrinsic:
    match: '%[\w\.]+%'
    name: variable.language
  SpecValue:
    match: '~[\w-]+~'
    name: 'constant.language markup.italic'
  Code:
    begin: '`'
    end: '`'
    contentName: source.js
    patterns:
    - include: 'source.js'
  Value:
    match: '\*(?:(".+?")|(\w+))\*'
    name: variable.language
    captures:
      1: { name: string.quoted }
      2: { name: variable.language }
  String:
    begin: '"'
    end: '"'
    name: string.quoted
